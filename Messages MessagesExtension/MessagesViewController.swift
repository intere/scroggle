//
//  MessagesViewController.swift
//  Messages MessagesExtension
//
//  Created by Eric Internicola on 10/30/18.
//  Copyright Â© 2018 Eric Internicola. All rights reserved.
//

import GameKit
import Messages
import UIKit

class MessagesViewController: MSMessagesAppViewController {
    
    @IBOutlet weak var label: UILabel!

    override func viewDidLoad() {
        super.viewDidLoad()
        updateLabel()
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
        print("conversation: \(conversation)")
        wireAuthHandler()
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }

}

// MARK: - Implementation

extension MessagesViewController {

    func updateLabel() {
        if GKLocalPlayer.local.isAuthenticated {
            label.text = "Authenticated"
        } else {
            label.text = "Not Authenticated"
        }
    }

    func wireAuthHandler() {
        GKLocalPlayer.local.authenticateHandler = { [weak self] gameCenterVC, error in
            if let error = error {
                return print("Error with GameCenter Auth: \(error.localizedDescription)")
            }
            guard let gameCenterVC = gameCenterVC else {
                return print("No GameCenter VC")
            }
            self?.present(gameCenterVC, animated: true) {
                DispatchQueue.main.async { [weak self] in
                    self?.updateLabel()
                }
            }
        }
    }

}
